
//cn4
#include <stdio.h>
#include <stdlib.h>
int findPath(int G[8][8],int V,int E,int edge[20][20],int S)
{
    int i,u,v,k,distance[20],parent[20],flag=1;
    for(i=0;i<V;i++)
        distance[i]=1000,parent[i]=-1;
    distance[S-1]=0;
    for(i=0;i<V-1;i++)
    {
        for(k=0;k<E;k++)
        {
            u=edge[k][0],v=edge[k][1];
            if(distance[u]+G[u][v]<distance[v])
                distance[v]=distance[u]+G[u][v],parent[v]=u;
                    
        }
    }
    for(k=0;k<E;k++)
    {
        u=edge[k][0],v=edge[k][1];
         if(distance[u]+G[u][v]<distance[v])
             flag=0;
        
    }
    printf("Vertex cost \n");
    if(flag)
        for(i=0;i<V;i++)
            printf("%d\t %d\n",i+1,distance[i]);
    return flag;
}
int main() {
    int V,edge[20][20],i,j,k=0;
    printf("Enter no. of vertices: ");
    scanf("%d",&V);
    int G[8][8]={{0,3,4,6,0,8,0,0},{3,0,0,0,0,1,0,4},{4,0,0,7,0,5,0,0},
    {6,0,7,0,5,3,0,0},{0,0,0,3,0,0,6,7},{8,1,5,3,0,0,3,7},{0,0,0,0,6,3,0,6},{0,4,0,0,3,7,6,0}};
    for(i=0;i<V;i++)
    
        for(j=0;j<V;j++)
        {
            if(G[i][j]!=0)
            {               edge[k][0]=i;
            edge[k++][1]=j;
            }}
        for(int i=0;i<V;i++)
        {
            printf("\n Source vertex %d\n",i+1);
            findPath(G,V,k,edge,i+1);
        }
        return 0;
    }
  



